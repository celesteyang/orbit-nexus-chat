/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Auth Service API
 * This is the authentication service for ChatOrbit.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  MainMessageResponse
} from './';






/**
 * Logout the user by clearing the JWT cookie
 * @summary Logout
 */
export const postLogout = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MainMessageResponse>> => {
    
    
    return axios.default.post(
      `/logout`,undefined,options
    );
  }



export const getPostLogoutMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLogout>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postLogout>>, TError,void, TContext> => {

const mutationKey = ['postLogout'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postLogout>>, void> = () => {
          

          return  postLogout(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postLogout>>>
    
    export type PostLogoutMutationError = AxiosError<unknown>

    /**
 * @summary Logout
 */
export const usePostLogout = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postLogout>>, TError,void, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostLogoutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    