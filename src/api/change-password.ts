/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Auth Service API
 * This is the authentication service for ChatOrbit.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  MainChangePasswordRequest,
  MainErrorResponse,
  MainMessageResponse
} from './';






/**
 * Change the password of the logged-in user
 * @summary Change Password
 */
export const postChangePassword = (
    mainChangePasswordRequest: MainChangePasswordRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MainMessageResponse>> => {
    
    
    return axios.default.post(
      `/change-password`,
      mainChangePasswordRequest,options
    );
  }



export const getPostChangePasswordMutationOptions = <TError = AxiosError<MainErrorResponse | MainErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChangePassword>>, TError,{data: MainChangePasswordRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postChangePassword>>, TError,{data: MainChangePasswordRequest}, TContext> => {

const mutationKey = ['postChangePassword'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postChangePassword>>, {data: MainChangePasswordRequest}> = (props) => {
          const {data} = props ?? {};

          return  postChangePassword(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postChangePassword>>>
    export type PostChangePasswordMutationBody = MainChangePasswordRequest
    export type PostChangePasswordMutationError = AxiosError<MainErrorResponse | MainErrorResponse>

    /**
 * @summary Change Password
 */
export const usePostChangePassword = <TError = AxiosError<MainErrorResponse | MainErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postChangePassword>>, TError,{data: MainChangePasswordRequest}, TContext>, axios?: AxiosRequestConfig}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postChangePassword>>,
        TError,
        {data: MainChangePasswordRequest},
        TContext
      > => {

      const mutationOptions = getPostChangePasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    